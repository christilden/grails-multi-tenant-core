The 'multiTenant' mode relies your application to use just one database for all tenants running. This is useful when you have a SaaS that allows user to sign up online and have their tenants running just after signing up. This is the simpler approach on multi-tenancy. 

First thing to do, is to tell the plugin witch classes will be treated as multi-tenant ones. You can do it, but annotating your domain classes with the *@MultiTenant* annotation, as show below:

{code}
import grails.plugin.multitenant.core.groovy.compiler.MultiTenant

@MultiTenant
class MyDomainClass {

}
{code}

This way, each instance of MyDomainClass will belong to some tenant. To achieve this, the plugin hooks into all hibernate events that query your database, adding another condition in your queries that will filter just instances of the current tenant.

For example, imagine you have 2 tenants, each one with 2 instances of MyDomainClass. When the app is running on tenant 1, calling 

{code}
def lst = MyDomainClass.list()
{code}

will return just its 2 instances, even if you have 4 in your database.

The plugin hooks either on save/update events, setting the value of tenantId property automagically.

{warning}
You don't need to declare the 'tenantId' property, the plugin even auto-inject it for you, so, keep your domain class code clean
{warning}